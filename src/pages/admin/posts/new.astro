---
import '../../../styles/global.css';
---

<!doctype html>
<html lang="pl">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Nowy wpis | Panel administratora</title>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <script src="https://cdn.tiny.cloud/1/h31ss6kh0xwwlxorxccuglxblbvl3dgv1ux05vw57c8xk09q/tinymce/7/tinymce.min.js" referrerpolicy="origin"></script>
	</head>
	<body class="min-h-screen bg-gray-50">
		<div class="flex h-screen">
			<!-- Sidebar -->
			<aside class="w-64 bg-white shadow-md">
				<div class="p-4 border-b border-gray-200">
					<h2 class="text-lg font-medium text-gray-900">Panel administratora</h2>
				</div>

				<nav class="mt-5 px-2">
					<a
						href="/admin/dashboard"
						class="group flex items-center px-2 py-2 text-base font-medium rounded-md text-gray-700 hover:bg-gray-100 hover:text-gray-900">
						<svg xmlns="http://www.w3.org/2000/svg" class="mr-3 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path
								d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"
							></path>
						</svg>
						Dashboard
					</a>

					<a
						href="/admin/posts"
						class="mt-1 group flex items-center px-2 py-2 text-base font-medium rounded-md bg-primary-50 text-primary-600">
						<svg xmlns="http://www.w3.org/2000/svg" class="mr-3 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path
								fill-rule="evenodd"
								d="M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z"
								clip-rule="evenodd"></path>
							<path d="M15 7h1a2 2 0 012 2v5.5a1.5 1.5 0 01-3 0V7z"></path>
						</svg>
						Wpisy
					</a>

					<a
						href="/admin/settings"
						class="mt-1 group flex items-center px-2 py-2 text-base font-medium rounded-md text-gray-700 hover:bg-gray-100 hover:text-gray-900">
						<svg xmlns="http://www.w3.org/2000/svg" class="mr-3 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path
								fill-rule="evenodd"
								d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z"
								clip-rule="evenodd"></path>
						</svg>
						Ustawienia
					</a>
				</nav>

				<div class="mt-auto p-4 border-t border-gray-200">
					<div class="flex items-center" id="user-profile">
						<div class="flex-shrink-0">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-6 w-6 text-gray-400"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor">
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
							</svg>
						</div>
						<div class="ml-3">
							<p class="text-sm font-medium text-gray-700" id="user-email">Ładowanie...</p>
							<button id="logout-button" class="text-xs font-medium text-primary-600 hover:text-primary-500">
								Wyloguj
							</button>
						</div>
					</div>
				</div>
			</aside>

			<!-- Main content -->
			<div class="flex-1 flex flex-col">
				<header class="bg-white shadow">
					<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
						<h1 class="text-xl font-bold text-gray-900">Nowy wpis</h1>
						<a href="/admin/posts" class="text-sm font-medium text-primary-600 hover:text-primary-500">
							&larr; Powrót do listy
						</a>
					</div>
				</header>

				<main class="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
					<div class="max-w-3xl mx-auto">
						<!-- Alert dla błędów -->
						<div id="error-alert" class="hidden mb-6 p-4 rounded-md bg-red-50 text-red-800">
							<div class="flex">
								<div class="flex-shrink-0">
									<svg
										class="h-5 w-5 text-red-400"
										xmlns="http://www.w3.org/2000/svg"
										viewBox="0 0 20 20"
										fill="currentColor">
										<path
											fill-rule="evenodd"
											d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
											clip-rule="evenodd"></path>
									</svg>
								</div>
								<div class="ml-3">
									<h3 class="text-sm font-medium text-red-800" id="error-message">Nie udało się zapisać wpisu.</h3>
								</div>
							</div>
						</div>

						<!-- Success alert -->
						<div id="success-alert" class="hidden mb-6 p-4 rounded-md bg-green-50 text-green-800">
							<div class="flex">
								<div class="flex-shrink-0">
									<svg
										class="h-5 w-5 text-green-400"
										xmlns="http://www.w3.org/2000/svg"
										viewBox="0 0 20 20"
										fill="currentColor">
										<path
											fill-rule="evenodd"
											d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
											clip-rule="evenodd"></path>
									</svg>
								</div>
								<div class="ml-3">
									<h3 class="text-sm font-medium text-green-800">Wpis został zapisany pomyślnie!</h3>
								</div>
							</div>
						</div>

						<!-- Formularz -->
						<form id="post-form" class="space-y-6 pb-12">
							<div>
								<label for="title" class="block text-sm font-medium text-gray-700"> Tytuł </label>
								<div class="mt-1">
									<input
										type="text"
										name="title"
										id="title"
										required
										class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
									/>
								</div>
							</div>

							<div>
								<label for="slug" class="block text-sm font-medium text-gray-700"> Slug </label>
								<div class="mt-1">
									<div class="flex rounded-md shadow-sm">
										<span
											class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 sm:text-sm">
											/posts/
										</span>
										<input
											type="text"
											name="slug"
											id="slug"
											required
											class="flex-1 min-w-0 block w-full rounded-none rounded-r-md border-gray-300 focus:border-primary-500 focus:ring-primary-500 sm:text-sm"
										/>
									</div>
								</div>
								<p class="mt-1 text-sm text-gray-500" id="slug-description">URL wpisu.</p>
							</div>

							<div>
								<label for="excerpt" class="block text-sm font-medium text-gray-700"> Skrót (opcjonalnie) </label>
								<div class="mt-1">
									<textarea
										id="excerpt"
										name="excerpt"
										rows="3"
										class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
									></textarea>
								</div>
								<p class="mt-1 text-sm text-gray-500">
									Krótki fragment wyświetlany na liście wpisów. Jeśli nie wypełnisz, zostanie automatycznie wygenerowany
									z treści.
								</p>
							</div>

							<div>
								<label for="content" class="block text-sm font-medium text-gray-700"> Treść </label>
								<div class="mt-1">
									<textarea
										id="content"
										name="content"
										rows="12"
										required
										class="block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500"
									></textarea>
								</div>
							</div>

							<div class="flex items-center">
								<input
									id="is-published"
									name="is-published"
									type="checkbox"
									class="h-4 w-4 rounded border-gray-300 text-primary-600 focus:ring-primary-500"
								/>
								<label for="is-published" class="ml-2 block text-sm text-gray-900"> Opublikuj teraz </label>
							</div>

							<div class="flex justify-end space-x-3">
								<a
									href="/admin/posts"
									class="inline-flex justify-center py-2 px-4 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
									Anuluj
								</a>
								<button
									type="submit"
									id="save-button"
									class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
									Zapisz wpis
								</button>
							</div>
						</form>
					</div>
				</main>
			</div>
		</div>
	</body>
</html>

<script>
	// Importujemy Firebase używając biblioteki ES Module
	import { initializeApp } from 'firebase/app';
	import { getAuth, signOut, onAuthStateChanged } from 'firebase/auth';
	import { getFirestore, collection, addDoc, Timestamp } from 'firebase/firestore';
	import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';

	// Konfiguracja Firebase
	const firebaseConfig = {
		apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
		authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
		projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
		storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
		messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
		appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
	};

	// Inicjalizacja Firebase
	const app = initializeApp(firebaseConfig);
	const auth = getAuth(app);
	const db = getFirestore(app);
	const storage = getStorage(app);

	// Elementy interfejsu
	const userEmailElement = document.getElementById('user-email');
	const logoutButton = document.getElementById('logout-button');
	const postForm = document.getElementById('post-form');
	const titleInput = document.getElementById('title');
	const slugInput = document.getElementById('slug');
	const excerptInput = document.getElementById('excerpt');
	const contentInput = document.getElementById('content');
	const isPublishedCheckbox = document.getElementById('is-published');
	const saveButton = document.getElementById('save-button');
	const errorAlert = document.getElementById('error-alert');
	const errorMessage = document.getElementById('error-message');
	const successAlert = document.getElementById('success-alert');

	// Inicjalizacja TinyMCE
	document.addEventListener('DOMContentLoaded', () => {
		tinymce.init({
			selector: '#content',
			plugins:
				'anchor autolink charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount',
			toolbar:
				'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table | align lineheight | numlist bullist indent outdent | emoticons charmap | removeformat',
			height: 400,
			language: 'pl',
			skin: 'oxide',
			menubar: true,
			branding: false,
			promotion: false,

			// Konfiguracja przesyłania obrazów
			images_upload_handler: async function (blobInfo, progress) {
				try {
					const file = blobInfo.blob();

					// Generowanie unikalnej nazwy pliku
					const timestamp = new Date().getTime();
					const fileExtension = file.name?.split('.').pop() || file.type.split('/').pop() || 'jpg';
					const fileName = `images/${timestamp}-${Math.random().toString(36).substring(2, 15)}.${fileExtension}`;

					// Referencja do Storage
					const imageRef = storageRef(storage, fileName);

					// Przesłanie pliku
					const uploadTask = await uploadBytes(imageRef, file);

					// Pobranie URL do pliku
					const downloadURL = await getDownloadURL(imageRef);

					return downloadURL;
				} catch (error) {
					console.error('Błąd podczas przesyłania obrazu:', error);
					return Promise.reject('Nie udało się przesłać obrazu. Spróbuj ponownie.');
				}
			},

			setup: editor => {
				// Upewnij się, że wartość edytora jest aktualizowana w ukrytym textarea przed wysyłką formularza
				editor.on('change', () => {
					editor.save();
				});
			},
		});
	});
	// Sprawdź stan uwierzytelnienia
	onAuthStateChanged(auth, user => {
		if (!user) {
			// Użytkownik nie jest zalogowany, przekieruj do ekranu logowania
			window.location.href = '/admin/login';
			return;
		}

		// Wyświetl email użytkownika
		if (userEmailElement) {
			userEmailElement.textContent = user.email || 'Użytkownik';
		}
	});

	// Obsługa wylogowania
	if (logoutButton) {
		logoutButton.addEventListener('click', async () => {
			try {
				await signOut(auth);
				// Przekierowanie do strony logowania
				window.location.href = '/admin/login';
			} catch (error) {
				console.error('Błąd podczas wylogowywania:', error);
				alert('Nie udało się wylogować. Spróbuj ponownie.');
			}
		});
	}

	// Automatyczne generowanie sluga z tytułu
	if (titleInput && slugInput) {
		titleInput.addEventListener('input', e => {
			const title = e.target.value || '';
			const slug = title
				.toLowerCase()
				.replace(/[^\w\s-]/g, '') // Usuń znaki specjalne
				.replace(/\s+/g, '-') // Zamień spacje na myślniki
				.replace(/-+/g, '-') // Usuń powtarzające się myślniki
				.trim();

			slugInput.value = slug;
		});
	}

	// Obsługa formularza
	if (postForm) {
		postForm.addEventListener('submit', async e => {
			e.preventDefault();
			// Pobierz wartości z formularza
			if (tinymce.get('content')) {
				tinymce.get('content').save();
			}
			// Walidacja
			if (!titleInput.value || !slugInput.value || !contentInput.value) {
				showError('Wypełnij wszystkie wymagane pola.');
				return;
			}

			// Sprawdź format sluga
			const slugRegex = /^[a-z0-9]+(?:-[a-z0-9]+)*$/;
			if (!slugRegex.test(slugInput.value)) {
				showError('Slug może zawierać tylko małe litery, cyfry i myślniki.');
				return;
			}

			try {
				// Zmień stan przycisku
				saveButton.disabled = true;
				saveButton.innerHTML = `
					<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
						<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
						<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
					</svg>
					Zapisywanie...
				`;

				// Ukryj alerty
				hideError();
				hideSuccess();

				// Pobierz aktualnego użytkownika
				const user = auth.currentUser;
				if (!user) {
					throw new Error('Musisz być zalogowany, aby dodać wpis.');
				}

				// Przygotuj dane wpisu
				const isPublished = isPublishedCheckbox.checked;
				const timestamp = Timestamp.now();

				const postData = {
					title: titleInput.value,
					slug: slugInput.value,
					content: contentInput.value,
					excerpt: excerptInput.value || null,
					isPublished: isPublished,
					publishedAt: isPublished ? timestamp : null,
					updatedAt: timestamp,
					author: user.email || 'unknown',
				};

				// Zapisz wpis do Firestore
				const docRef = await addDoc(collection(db, 'posts'), postData);

				// Pokaż alert sukcesu
				showSuccess();

				// Resetuj formularz
				postForm.reset();

				// Po 2 sekundach przekieruj do listy wpisów
				setTimeout(() => {
					window.location.href = '/admin/posts';
				}, 2000);
			} catch (error) {
				console.error('Błąd podczas dodawania wpisu:', error);
				showError(error.message || 'Nie udało się zapisać wpisu. Spróbuj ponownie.');

				// Przywróć stan przycisku
				saveButton.disabled = false;
				saveButton.textContent = 'Zapisz wpis';
			}
		});
	}

	// Pokaż komunikat błędu
	function showError(message) {
		errorMessage.textContent = message;
		errorAlert.classList.remove('hidden');

		// Przewiń do góry, aby użytkownik zobaczył błąd
		window.scrollTo(0, 0);
	}

	// Ukryj komunikat błędu
	function hideError() {
		errorAlert.classList.add('hidden');
	}

	// Pokaż komunikat sukcesu
	function showSuccess() {
		successAlert.classList.remove('hidden');

		// Przewiń do góry, aby użytkownik zobaczył sukces
		window.scrollTo(0, 0);
	}

	// Ukryj komunikat sukcesu
	function hideSuccess() {
		successAlert.classList.add('hidden');
	}
</script>
