---
import '../../../styles/global.css';
---

<!doctype html>
<html lang="pl">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Wpisy | Panel administratora</title>
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	</head>
	<body class="min-h-screen bg-gray-50">
		<div class="flex h-screen">
			<!-- Sidebar -->
			<aside class="w-64 bg-white shadow-md">
				<div class="p-4 border-b border-gray-200">
					<h2 class="text-lg font-medium text-gray-900">Panel administratora</h2>
				</div>
				
				<nav class="mt-5 px-2">
					<a href="/admin/dashboard" class="group flex items-center px-2 py-2 text-base font-medium rounded-md text-gray-700 hover:bg-gray-100 hover:text-gray-900">
						<svg xmlns="http://www.w3.org/2000/svg" class="mr-3 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
						</svg>
						Dashboard
					</a>
					
					<a href="/admin/posts" class="mt-1 group flex items-center px-2 py-2 text-base font-medium rounded-md bg-primary-50 text-primary-600">
						<svg xmlns="http://www.w3.org/2000/svg" class="mr-3 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path fill-rule="evenodd" d="M2 5a2 2 0 012-2h8a2 2 0 012 2v10a2 2 0 002 2H4a2 2 0 01-2-2V5zm3 1h6v4H5V6zm6 6H5v2h6v-2z" clip-rule="evenodd" />
							<path d="M15 7h1a2 2 0 012 2v5.5a1.5 1.5 0 01-3 0V7z" />
						</svg>
						Wpisy
					</a>
					
					<a href="/admin/settings" class="mt-1 group flex items-center px-2 py-2 text-base font-medium rounded-md text-gray-700 hover:bg-gray-100 hover:text-gray-900">
						<svg xmlns="http://www.w3.org/2000/svg" class="mr-3 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
							<path fill-rule="evenodd" d="M11.49 3.17c-.38-1.56-2.6-1.56-2.98 0a1.532 1.532 0 01-2.286.948c-1.372-.836-2.942.734-2.106 2.106.54.886.061 2.042-.947 2.287-1.561.379-1.561 2.6 0 2.978a1.532 1.532 0 01.947 2.287c-.836 1.372.734 2.942 2.106 2.106a1.532 1.532 0 012.287.947c.379 1.561 2.6 1.561 2.978 0a1.533 1.533 0 012.287-.947c1.372.836 2.942-.734 2.106-2.106a1.533 1.533 0 01.947-2.287c1.561-.379 1.561-2.6 0-2.978a1.532 1.532 0 01-.947-2.287c.836-1.372-.734-2.942-2.106-2.106a1.532 1.532 0 01-2.287-.947zM10 13a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd" />
						</svg>
						Ustawienia
					</a>
				</nav>
				
				<div class="mt-auto p-4 border-t border-gray-200">
					<div class="flex items-center" id="user-profile">
						<div class="flex-shrink-0">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
							</svg>
						</div>
						<div class="ml-3">
							<p class="text-sm font-medium text-gray-700" id="user-email">Ładowanie...</p>
							<button id="logout-button" class="text-xs font-medium text-primary-600 hover:text-primary-500">
								Wyloguj
							</button>
						</div>
					</div>
				</div>
			</aside>
			
			<!-- Main content -->
			<div class="flex-1 flex flex-col">
				<header class="bg-white shadow">
					<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 flex justify-between items-center">
						<h1 class="text-xl font-bold text-gray-900">Wpisy</h1>
						<button id="new-post-button" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
							Dodaj nowy wpis
						</button>
					</div>
				</header>
				
				<main class="flex-1 overflow-y-auto p-4 sm:p-6 lg:p-8">
					<div class="max-w-7xl mx-auto">
						<!-- Loading state -->
						<div id="loading-state" class="text-center py-10">
							<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
							<p class="text-gray-600">Wczytywanie wpisów...</p>
						</div>
						
						<!-- Empty state -->
						<div id="empty-state" class="text-center py-10 hidden">
							<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 13h6m-3-3v6m-9 1V7a2 2 0 012-2h6l2 2h6a2 2 0 012 2v8a2 2 0 01-2 2H5a2 2 0 01-2-2z" />
							</svg>
							<h3 class="mt-2 text-sm font-medium text-gray-900">Brak wpisów</h3>
							<p class="mt-1 text-sm text-gray-500">Zacznij od dodania nowego wpisu do bloga.</p>
							<div class="mt-6">
								<button id="empty-add-new" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
									Dodaj nowy wpis
								</button>
							</div>
						</div>
						
						<!-- Posts list -->
						<div id="posts-list" class="hidden">
							<div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg">
								<table class="min-w-full divide-y divide-gray-300">
									<thead class="bg-gray-50">
										<tr>
											<th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Tytuł</th>
											<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Status</th>
											<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Data</th>
											<th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Autor</th>
											<th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
												<span class="sr-only">Akcje</span>
											</th>
										</tr>
									</thead>
									<tbody id="posts-table-body" class="divide-y divide-gray-200 bg-white">
										<!-- Posts will be loaded here by JavaScript -->
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</main>
			</div>
		</div>
		
		<!-- Delete confirmation modal -->
		<div id="delete-modal" class="hidden fixed z-10 inset-0 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
			<div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
				<div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>
				
				<span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
				
				<div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
					<div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
						<div class="sm:flex sm:items-start">
							<div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
								<svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
								</svg>
							</div>
							<div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
								<h3 class="text-lg leading-6 font-medium text-gray-900" id="modal-title">
									Potwierdź usunięcie
								</h3>
								<div class="mt-2">
									<p class="text-sm text-gray-500" id="delete-confirmation-text">
										Czy na pewno chcesz usunąć ten wpis? Ta akcja jest nieodwracalna.
									</p>
								</div>
							</div>
						</div>
					</div>
					<div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
						<button type="button" id="confirm-delete-button" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm">
							Usuń
						</button>
						<button type="button" id="cancel-delete-button" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
							Anuluj
						</button>
					</div>
				</div>
			</div>
		</div>
	</body>
</html>

<script>
	// Importujemy Firebase używając biblioteki ES Module
	import { initializeApp } from 'firebase/app';
	import { getAuth, signOut, onAuthStateChanged } from 'firebase/auth';
	import { getFirestore, collection, getDocs, doc, deleteDoc, Timestamp } from 'firebase/firestore';

	// Konfiguracja Firebase
	const firebaseConfig = {
		apiKey: import.meta.env.PUBLIC_FIREBASE_API_KEY,
		authDomain: import.meta.env.PUBLIC_FIREBASE_AUTH_DOMAIN,
		projectId: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
		storageBucket: import.meta.env.PUBLIC_FIREBASE_STORAGE_BUCKET,
		messagingSenderId: import.meta.env.PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
		appId: import.meta.env.PUBLIC_FIREBASE_APP_ID,
	};

	// Inicjalizacja Firebase
	const app = initializeApp(firebaseConfig);
	const auth = getAuth(app);
	const db = getFirestore(app);

	// Elementy interfejsu
	const userEmailElement = document.getElementById('user-email');
	const logoutButton = document.getElementById('logout-button');
	const loadingState = document.getElementById('loading-state');
	const emptyState = document.getElementById('empty-state');
	const postsList = document.getElementById('posts-list');
	const postsTableBody = document.getElementById('posts-table-body');
	const newPostButton = document.getElementById('new-post-button');
	const emptyAddNewButton = document.getElementById('empty-add-new');
	const deleteModal = document.getElementById('delete-modal');
	const deleteConfirmationText = document.getElementById('delete-confirmation-text');
	const confirmDeleteButton = document.getElementById('confirm-delete-button');
	const cancelDeleteButton = document.getElementById('cancel-delete-button');

	// Zmienne stanu
	let currentPostToDelete = null;

	// Sprawdź stan uwierzytelnienia
	onAuthStateChanged(auth, async (user) => {
		if (!user) {
			// Użytkownik nie jest zalogowany, przekieruj do ekranu logowania
			window.location.href = '/admin/login';
			return;
		}

		// Wyświetl email użytkownika
		if (userEmailElement) {
			userEmailElement.textContent = user.email || 'Użytkownik';
		}

		// Pobierz posty
		await loadPosts();
	});

	// Obsługa wylogowania
	if (logoutButton) {
		logoutButton.addEventListener('click', async () => {
			try {
				await signOut(auth);
				// Przekierowanie do strony logowania
				window.location.href = '/admin/login';
			} catch (error) {
				console.error('Błąd podczas wylogowywania:', error);
				alert('Nie udało się wylogować. Spróbuj ponownie.');
			}
		});
	}

	// Obsługa dodawania nowego wpisu
	if (newPostButton) {
		newPostButton.addEventListener('click', () => {
			window.location.href = '/admin/posts/new';
		});
	}

	if (emptyAddNewButton) {
		emptyAddNewButton.addEventListener('click', () => {
			window.location.href = '/admin/posts/new';
		});
	}

	// Obsługa anulowania usuwania
	if (cancelDeleteButton) {
		cancelDeleteButton.addEventListener('click', () => {
			hideDeleteModal();
		});
	}

	// Obsługa potwierdzenia usunięcia
	if (confirmDeleteButton) {
		confirmDeleteButton.addEventListener('click', async () => {
			if (!currentPostToDelete) return;
			
			try {
				// Zmień tekst przycisku na czas usuwania
				confirmDeleteButton.textContent = 'Usuwanie...';
				confirmDeleteButton.disabled = true;
				
				// Usuń post z Firestore
				await deleteDoc(doc(db, 'posts', currentPostToDelete.id));
				
				// Ukryj modal i odśwież listę
				hideDeleteModal();
				await loadPosts();
			} catch (error) {
				console.error('Błąd podczas usuwania wpisu:', error);
				alert('Nie udało się usunąć wpisu. Spróbuj ponownie.');
				confirmDeleteButton.textContent = 'Usuń';
				confirmDeleteButton.disabled = false;
			}
		});
	}

	// Pokaż modal potwierdzenia usunięcia
	function showDeleteModal(post) {
		currentPostToDelete = post;
		if (deleteConfirmationText) {
			deleteConfirmationText.textContent = `Czy na pewno chcesz usunąć wpis "${post.title}"? Ta akcja jest nieodwracalna.`;
		}
		deleteModal.classList.remove('hidden');
	}

	// Ukryj modal potwierdzenia usunięcia
	function hideDeleteModal() {
		deleteModal.classList.add('hidden');
		currentPostToDelete = null;
		if (confirmDeleteButton) {
			confirmDeleteButton.textContent = 'Usuń';
			confirmDeleteButton.disabled = false;
		}
	}

	// Formatowanie daty
	function formatDate(timestamp) {
		if (!timestamp) return '—';
		
		const date = timestamp instanceof Timestamp ? timestamp.toDate() : new Date(timestamp);
		
		return new Intl.DateTimeFormat('pl-PL', {
			year: 'numeric',
			month: 'short',
			day: 'numeric',
		}).format(date);
	}

	// Pobieranie postów
	async function loadPosts() {
		try {
			loadingState.classList.remove('hidden');
			emptyState.classList.add('hidden');
			postsList.classList.add('hidden');
			
			const postsCollection = collection(db, 'posts');
			const postsSnapshot = await getDocs(postsCollection);
			
			if (postsSnapshot.empty) {
				// Brak postów - pokaż pusty stan
				loadingState.classList.add('hidden');
				emptyState.classList.remove('hidden');
				return;
			}
			
			// Przetwórz posty i posortuj je wg daty (najnowsze pierwsze)
			const posts = postsSnapshot.docs.map(doc => ({
				id: doc.id,
				...doc.data()
			})).sort((a, b) => {
				// Sortuj wg daty aktualizacji lub publikacji
				const dateA = a.updatedAt || a.publishedAt;
				const dateB = b.updatedAt || b.publishedAt;
				
				if (!dateA) return 1;
				if (!dateB) return -1;
				
				const timeA = dateA instanceof Timestamp ? dateA.toMillis() : new Date(dateA).getTime();
				const timeB = dateB instanceof Timestamp ? dateB.toMillis() : new Date(dateB).getTime();
				
				return timeB - timeA;
			});
			
			// Wypełnij tabelę postami
			postsTableBody.innerHTML = '';
			
			posts.forEach(post => {
				const row = document.createElement('tr');
				
				row.innerHTML = `
					<td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">${post.title}</td>
					<td class="whitespace-nowrap px-3 py-4 text-sm">
						<span class="inline-flex rounded-full px-2 text-xs font-semibold leading-5 ${post.isPublished 
							? 'bg-green-100 text-green-800' 
							: 'bg-yellow-100 text-yellow-800'}">
							${post.isPublished ? 'Opublikowany' : 'Szkic'}
						</span>
					</td>
					<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">${formatDate(post.updatedAt || post.publishedAt)}</td>
					<td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">${post.author || '—'}</td>
					<td class="whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
						<div class="flex space-x-2 justify-end">
							<button data-action="edit" data-id="${post.id}" class="text-primary-600 hover:text-primary-900">
								Edytuj
							</button>
							<button data-action="view" data-id="${post.id}" class="text-gray-600 hover:text-gray-900">
								Podgląd
							</button>
							<button data-action="delete" data-id="${post.id}" class="text-red-600 hover:text-red-900">
								Usuń
							</button>
						</div>
					</td>
				`;
				
				postsTableBody.appendChild(row);
			});
			
			// Dodaj obsługę przycisków akcji
			document.querySelectorAll('[data-action]').forEach(button => {
				button.addEventListener('click', (e) => {
					const action = e.target.getAttribute('data-action');
					const postId = e.target.getAttribute('data-id');
					const post = posts.find(p => p.id === postId);
					
					if (action === 'edit') {
						window.location.href = `/admin/posts/${postId}`;
					} else if (action === 'view') {
						if (post && post.slug) {
							window.open(`/posts/${post.slug}`, '_blank');
						}
					} else if (action === 'delete') {
						showDeleteModal(post);
					}
				});
			});
			
			// Pokaż listę postów
			loadingState.classList.add('hidden');
			postsList.classList.remove('hidden');
			
		} catch (error) {
			console.error('Błąd podczas pobierania postów:', error);
			loadingState.classList.add('hidden');
			
			// Pokaż komunikat o błędzie
			emptyState.querySelector('h3').textContent = 'Wystąpił błąd';
			emptyState.querySelector('p').textContent = 'Nie udało się pobrać listy wpisów. Spróbuj ponownie.';
			emptyState.classList.remove('hidden');
		}
	}
</script>